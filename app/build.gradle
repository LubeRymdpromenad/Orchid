plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
}

apply plugin: 'kotlin-kapt'
apply plugin: 'com.android.application'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'androidx.navigation.safeargs.kotlin'

android {
    compileSdkVersion 30

    buildFeatures {
        dataBinding true
    }

    testOptions {
        animationsDisabled = true
        unitTests.returnDefaultValues = true
    }

//    useLibrary 'android.test.runner'
//    useLibrary 'android.test.base'
//    useLibrary 'android.test.mock'

    defaultConfig {
        applicationId "com.example.orchid"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner = "com.example.orchid.CustomTestRunner"
//        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        // Consult the README on instructions for setting up Unsplash API key
        buildConfigField("String", "UNSPLASH_ACCESS_KEY", "\"" + getUnsplashAccess() + "\"")

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments += ["room.schemaLocation":
//                                     "$projectDir/schemas".toString()]
//            }
//        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
//    hilt {
//        enableTransformForLocalTests = true
//    }
}

dependencies {
    // Hilt ViewModel extension
    //implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:2.28-alpha"
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'


    kapt "com.github.bumptech.glide:compiler:4.10.0"
    implementation "com.github.bumptech.glide:glide:4.10.0"


//    // Hilt testing dependencies
    implementation 'com.google.dagger:hilt-android:2.37'
    annotationProcessor 'com.google.dagger:hilt-compiler:2.37'

    // For instrumentation tests
    androidTestImplementation  'com.google.dagger:hilt-android-testing:2.37'
    // For local unit tests
    androidTestAnnotationProcessor 'com.google.dagger:hilt-compiler:2.37'
    androidTestAnnotationProcessor 'com.google.dagger:hilt-android-compiler:2.37'

    testImplementation 'com.google.dagger:hilt-android-testing:2.37'
    testAnnotationProcessor 'com.google.dagger:hilt-compiler:2.37'
    testAnnotationProcessor 'com.google.dagger:hilt-android-compiler:2.37'

    implementation 'com.google.dagger:hilt-android:2.37'
    kapt 'com.google.dagger:hilt-compiler:2.37'
    kapt "androidx.hilt:hilt-compiler:1.0.0"
//    kapt "com.google.dagger:hilt-android-gradle-plugin:2.33-beta"

    // For instrumentation tests
    kaptAndroidTest 'com.google.dagger:hilt-compiler:2.37'
    kaptAndroidTest 'com.google.dagger:hilt-android-compiler:2.37'
    kapt "com.google.dagger:hilt-android-compiler:2.37"

    // For local unit tests
    kaptTest 'com.google.dagger:hilt-compiler:2.37'
    kaptTest("com.google.dagger:hilt-android-compiler:2.37")

    def paging_version = "2.1.2"
    implementation "androidx.paging:paging-runtime-ktx:$paging_version" // For Kotlin use paging-runtime-ktx
    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common-ktx:$paging_version" // For Kotlin use paging-common-ktx
    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version" // For Kotlin use paging-rxjava2-ktx

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
    implementation "io.reactivex.rxjava2:rxjava:2.1.12"

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation "com.squareup.okhttp3:logging-interceptor:4.5.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.6.0"

    implementation "androidx.fragment:fragment-ktx:1.3.3"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation 'org.mockito:mockito-core:2.28.2'
//    testImplementation "org.mockito:mockito-inline:2.25.0"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'

    testImplementation "junit:junit:4.12"
    testImplementation "androidx.arch.core:core-testing:2.0.1"
    testImplementation "io.mockk:mockk:1.10.0"
    testImplementation "org.mockito:mockito-inline:2.25.0"

    // PowerMockito https://github.com/robolectric/robolectric/wiki/Using-PowerMock
    testImplementation "org.powermock:powermock-module-junit4:2.0.2"
    testImplementation "org.powermock:powermock-module-junit4-rule:2.0.2"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.2"
    testImplementation "org.powermock:powermock-classloading-xstream:2.0.2"

    testImplementation "junit:junit:4.12"
    testImplementation "androidx.arch.core:core-testing:2.0.1"
    testImplementation "io.mockk:mockk:1.10.0"

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    testImplementation "org.mockito:mockito-inline:2.25.0"

    androidTestImplementation "androidx.test:runner:1.4.0"

    androidTestImplementation "androidx.test:core:1.0.0"
    androidTestImplementation "androidx.test.ext:junit:1.0.0"
    androidTestImplementation "androidx.test:rules:1.4.0"

    androidTestImplementation('androidx.multidex:multidex-instrumentation:2.0.0') {
        exclude group: 'com.android.support', module: 'multidex'
    }

    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:1.2"
    androidTestImplementation "com.google.dexmaker:dexmaker:1.2"

    androidTestImplementation "androidx.annotation:annotation:1.0.0"

    // PowerMockito https://github.com/robolectric/robolectric/wiki/Using-PowerMock
    testImplementation "org.powermock:powermock-module-junit4:2.0.2"
    testImplementation "org.powermock:powermock-module-junit4-rule:2.0.2"
    testImplementation "org.powermock:powermock-api-mockito2:2.0.2"
    testImplementation "org.powermock:powermock-classloading-xstream:2.0.2"

//    androidTesthilt-android-testingImplementation "androidx.test.espresso:espresso-core:3.4.0"
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.3.0"

    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.google.code.findbugs'
    }

    debugImplementation "androidx.fragment:fragment-testing:1.3.5"

    kaptAndroidTest "com.google.dagger:dagger-compiler:2.21"
}

def getUnsplashAccess() {
    return project.findProperty("unsplash_access_key")
}